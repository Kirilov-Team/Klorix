from win11toast import toast
import threading

def push(txt):
    toast(txt, duration='short', audio={'silent': 'true'})

t = threading.Thread(target=push, args=("Klorix Ind√≠t√°sa...",))
t.start()

import customtkinter as ctk
import speech_recognition as sr
import pyttsx3
import deep_translator as dt
from playsound import playsound
import subprocess
from langchain_ollama import ChatOllama

# Glob√°lis v√°ltoz√≥k
escape_word = "exit"
recognizer = sr.Recognizer()
engine = pyttsx3.init()
llm = ChatOllama(model="qwen:0.5b", temperature=0)

# Hang be√°ll√≠t√°sa
engine.setProperty('rate', 180)
voices = engine.getProperty('voices')
for voice in voices:
    if "hu" in voice.id:
        engine.setProperty('voice', voice.id)

# Besz√©dszintetiz√°l√°s
def talk(text):
    engine.say(text)
    engine.runAndWait()

# Parancs feldolgoz√°sa (mikrofonon kereszt√ºl)
def take_command():
    try:
        with sr.Microphone() as source:
            audio = recognizer.listen(source)
            command = recognizer.recognize_google(audio, language="hu-HU").lower()
            return command
    except (sr.UnknownValueError, sr.RequestError, Exception):
        return None

# V√°lasz gener√°l√°sa (ford√≠t√°ssal √©s AI-val)
def generate_response(user_input):
    send_button.configure(state=ctk.DISABLED)
    try:
        send_button.configure(state=ctk.DISABLED)
        start_button.configure(state=ctk.DISABLED)
        prompt = dt.GoogleTranslator(source="hu", target="en").translate(user_input)
        messages = [("system", f"{prompt}"), ("human", f"{prompt}, short")]
        ai_msg = llm.invoke(messages)
        response = dt.GoogleTranslator(source="en", target="hu").translate(ai_msg.content)
        send_button.configure(state=ctk.NORMAL)
        return response
    except:
        send_button.configure(state=ctk.NORMAL)
        return "Nem siker√ºlt v√°laszt gener√°lni."


# GUI visszacsatol√°s
def indicate_listening():
    feedback_label.configure(text="üéôÔ∏è Hallgat...", text_color="green")
    root.update()

def stop_listening_feedback():
    feedback_label.configure(text="", text_color="blue")
    root.update()

# Parancs feldolgoz√°sa √©s v√°lasz megjelen√≠t√©se
def run_voice_command():
    global listening_active, last_response
    listening_active = True  # Jelz√©s, hogy hallgat√°sban van a rendszer
    indicate_listening()  # Vizu√°lis visszacsatol√°s: Hallgat...
    command = take_command()
    stop_listening_feedback()  # Ne jelenjen meg a "K√©sz" √ºzenet, ha le√°ll a hallgat√°s
    listening_active = False  # Le√°ll√≠tjuk a hallgat√°st

    if command:

        output_box.insert(ctk.END, f"Te: {command}\n")
        if escape_word in command:
            close_application()
            start_button.configure(text="üé§ Besz√©dind√≠t√°s")
        else:
            send_button.configure(state=ctk.DISABLED)
            start_button.configure(state=ctk.DISABLED)
            response = generate_response(command)
            output_box.insert(ctk.END, f"Klorix: {response}\n")
            output_box.yview(ctk.END)  # Auto-scroll to the latest output
            start_button.configure(text="üé§ Besz√©dind√≠t√°s")
            talk(response)
            last_response = response  # T√°roljuk az utols√≥ v√°laszt

    else:
        start_button.configure(text="üé§ Besz√©dind√≠t√°s")
    send_button.configure(state=ctk.NORMAL)
    start_button.configure(state=ctk.NORMAL)

# Kil√©p√©s a programb√≥l
def close_application():
    talk("Viszl√°t!")
    play_sound("lib/close.wav")
    root.destroy()
    subprocess.call("TASKKILL /F /IM Klorix.exe", shell=True)
    exit()

# Hang lej√°tsz√°sa
def play_sound(path):
    playsound(path)

# √öj funkci√≥: V√°lasz ism√©tl√©s√©nek funkci√≥ja
def repeat_last_response():
    global last_response
    if last_response:
        t = threading.Thread(target=talk, args=(last_response,))
        t.start()
    else:
        t = threading.Thread(target=talk, args=("M√©g nem kapt√°l v√°laszt!",))
        t.start()

# Sz√∂veges bemenet kezel√©se
def handle_text_input():
    global last_response

    # Bemenet beolvas√°sa
    user_input = text_input.get().strip()
    if not user_input:
        talk("K√©rlek, adj meg egy parancsot sz√∂vegesen!")
        return

    # Sz√∂veg megjelen√≠t√©se az output_box-ban √©s mez≈ë t√∂rl√©se
    output_box.insert(ctk.END, f"Te: {user_input}\n")
    text_input.delete(0, ctk.END)  # T√∂r√∂lj√ºk az adatokat
    output_box.yview(ctk.END)  # Auto-scroll
    send_button.configure(state=ctk.DISABLED)
    start_button.configure(state=ctk.DISABLED)

    # V√°lasz gener√°l√°sa k√ºl√∂n sz√°lon
    def generate_and_display_response():
        if escape_word in user_input:
            close_application()
        else:
            response = generate_response(user_input)
            output_box.insert(ctk.END, f"Klorix: {response}\n")
            output_box.yview(ctk.END)  # Auto-scroll
            talk(response)
            last_response = response  # T√°roljuk az utols√≥ v√°laszt
            send_button.configure(state=ctk.NORMAL)
            start_button.configure(state=ctk.NORMAL)

    threading.Thread(target=generate_and_display_response, daemon=True).start()


# GUI be√°ll√≠t√°sok
ctk.set_appearance_mode("dark")  # S√∂t√©t m√≥d bekapcsol√°sa
ctk.set_default_color_theme("dark-blue")  # K√©k sz√≠n≈± t√©ma

root = ctk.CTk()  # CustomTkinter ablak
root.title("Klorix AI Asszisztens")
root.geometry("600x500")
root.resizable(False, False)

# Sz√∂vegkimenet
output_frame = ctk.CTkFrame(root, corner_radius=10)
output_frame.pack(fill="both", expand=True, padx=10, pady=10)

output_box = ctk.CTkTextbox(output_frame, wrap="word", width=70, height=20, font=("Arial", 11))
output_box.pack(fill="both", expand=True)

# Visszacsatol√°s (hallgat√°s)
feedback_label = ctk.CTkLabel(root, text="", font=("Arial", 12, "bold"))
feedback_label.pack(pady=5)

# Gombok
button_frame = ctk.CTkFrame(root)
button_frame.pack(pady=10)

# Glob√°lis v√°ltoz√≥ a hallgat√°s √°llapot√°nak kezel√©s√©re
listening_active = False
last_response = ""  # Az utols√≥ v√°lasz t√°rol√°sa

# Gomb ind√≠t√°sa vagy le√°ll√≠t√°sa
def toggle_listening():
    global listening_active
    if listening_active:
        listening_active = False
        stop_listening_feedback()  # T√∂r√∂lj√ºk a "K√©sz" √ºzenetet
        start_button.configure(text="üé§ Besz√©dind√≠t√°s")
    else:
        threading.Thread(target=run_voice_command, daemon=True).start()
        start_button.configure(text="‚ùå Stop")

# V√°lasz ism√©tl√©s gomb
repeat_button = ctk.CTkButton(button_frame, text="üîÅ Ism√©tl√©s", command=repeat_last_response)
repeat_button.grid(row=0, column=2, padx=10)

start_button = ctk.CTkButton(button_frame, text="üé§ Besz√©dind√≠t√°s", command=toggle_listening)
start_button.grid(row=0, column=0, padx=10)

exit_button = ctk.CTkButton(button_frame, text="‚ùå Kil√©p√©s", command=close_application)
exit_button.grid(row=0, column=1, padx=10)

# Sz√∂veges input mez≈ë √©s gomb
text_input_frame = ctk.CTkFrame(root)
text_input_frame.pack(fill="x", padx=10, pady=10)

text_input = ctk.CTkEntry(text_input_frame, placeholder_text="√çrj be egy parancsot...", width=400)
text_input.grid(row=0, column=0, padx=10)

send_button = ctk.CTkButton(text_input_frame, text="üì© K√ºld√©s", command=handle_text_input)
send_button.grid(row=0, column=1, padx=10)

# Kezdeti √ºdv√∂zl√©s
output_box.insert(ctk.END, "Klorix: √údv√∂zl√∂m!\n")

t = threading.Thread(target=talk, args=("√údv√∂zl√∂m!",))
t.start()

# GUI futtat√°sa
root.mainloop()
